import pandas as pd
from sklearn.model_selection import learning_curve, train_test_split,GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from matplotlib import pyplot as plt
import seaborn as sns

data = pd.read_csv('C:\\Users\\Icsm\\Desktop\\数据分析学习笔记\\信用卡违约分析\\credit_default-master\\UCI_Credit_Card.csv',engine='python')
next_month = data['default.payment.next.month'].value_counts()
df = pd.DataFrame({'default.payment.next.month': next_month.index,'values': next_month.values})
# plt.rcParams['font.sans-serif']=['SimHei']
# plt.figure(figsize = (6,6))
# plt.title('信用卡违约率客户\n (违约：1，守约：0)')
# sns.set_color_codes("pastel")
# sns.barplot(x = 'default.payment.next.month', y='values',data=df)
# locs, labels = plt.xticks()
# plt.show()
data.drop(['ID'],inplace=True,axis=1)
target = data['default.payment.next.month'].values
columns = data.columns.tolist()
columns.remove('default.payment.next.month')
features = data[columns].values
#stratify意思是按照target比例分数据
train_x,test_x,train_y,test_y = train_test_split(features,target,test_size=0.30,stratify=target,random_state=1)

classifiers = [
    SVC(random_state = 1, kernel = 'rbf'),    
    DecisionTreeClassifier(random_state = 1, criterion = 'gini'),
    RandomForestClassifier(random_state = 1, criterion = 'gini'),
    KNeighborsClassifier(metric = 'minkowski'),
]

classifier_names = [
            'svc', 
            'decisiontreeclassifier',
            'randomforestclassifier',
            'kneighborsclassifier',
]
classifier_param_grid = [
            {'svc__C':[1], 'svc__gamma':[0.01]},
            {'decisiontreeclassifier__max_depth':[6,9,11]},
            {'randomforestclassifier__n_estimators':[3,5,6]} ,
            {'kneighborsclassifier__n_neighbors':[4,6,8]},
]
def GridSearchCV_work(pipeline, train_x, train_y, test_x, test_y, param_grid, score = 'accuracy'):
    response = {}
    gridsearch = GridSearchCV(estimator=pipeline,param_grid=param_grid,scoring=score)
    gridsearch.fit(train_x,train_y)
    print("GridSearch最优参数：", gridsearch.best_params_)
    print("GridSearch最优分数： %0.4lf" %gridsearch.best_score_)
    predict_y = gridsearch.predict(test_x)
    print("准确率 %0.4lf" %accuracy_score(test_y, predict_y))
    response['predict_y'] = predict_y
    response['accuracy_score'] = accuracy_score(test_y,predict_y)
    return response

for model, model_name, model_param_grid in zip(classifiers, classifier_names, classifier_param_grid):
    pipeline = Pipeline([
        ('scaler',StandardScaler()),
        (model_name,model)
    ])
    result = GridSearchCV_work(pipeline,train_x,train_y,test_x,test_y,model_param_grid)